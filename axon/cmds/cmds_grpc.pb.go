// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: cmds.proto

package cmds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentManagerClient is the client API for AgentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentManagerClient interface {
	RunEchoCommand(ctx context.Context, in *EchoCommandRequest, opts ...grpc.CallOption) (*EchoCommandResponse, error)
	RunShellCommand(ctx context.Context, in *ShellCommandRequest, opts ...grpc.CallOption) (*ShellCommandResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	Screenshot(ctx context.Context, in *ScreenshotRequest, opts ...grpc.CallOption) (*ScreenshotResponse, error)
	GetAgents(ctx context.Context, in *GetAgentsRequest, opts ...grpc.CallOption) (AgentManager_GetAgentsClient, error)
	StartSocksServer(ctx context.Context, in *StartSocksServerRequest, opts ...grpc.CallOption) (*StartSocksServerResponse, error)
	StopSocksServer(ctx context.Context, in *StopSocksServerRequest, opts ...grpc.CallOption) (*StopSocksServerResponse, error)
}

type agentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentManagerClient(cc grpc.ClientConnInterface) AgentManagerClient {
	return &agentManagerClient{cc}
}

func (c *agentManagerClient) RunEchoCommand(ctx context.Context, in *EchoCommandRequest, opts ...grpc.CallOption) (*EchoCommandResponse, error) {
	out := new(EchoCommandResponse)
	err := c.cc.Invoke(ctx, "/AgentManager/RunEchoCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) RunShellCommand(ctx context.Context, in *ShellCommandRequest, opts ...grpc.CallOption) (*ShellCommandResponse, error) {
	out := new(ShellCommandResponse)
	err := c.cc.Invoke(ctx, "/AgentManager/RunShellCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, "/AgentManager/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, "/AgentManager/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) Screenshot(ctx context.Context, in *ScreenshotRequest, opts ...grpc.CallOption) (*ScreenshotResponse, error) {
	out := new(ScreenshotResponse)
	err := c.cc.Invoke(ctx, "/AgentManager/Screenshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) GetAgents(ctx context.Context, in *GetAgentsRequest, opts ...grpc.CallOption) (AgentManager_GetAgentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentManager_ServiceDesc.Streams[0], "/AgentManager/GetAgents", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentManagerGetAgentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentManager_GetAgentsClient interface {
	Recv() (*AgentInfo, error)
	grpc.ClientStream
}

type agentManagerGetAgentsClient struct {
	grpc.ClientStream
}

func (x *agentManagerGetAgentsClient) Recv() (*AgentInfo, error) {
	m := new(AgentInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentManagerClient) StartSocksServer(ctx context.Context, in *StartSocksServerRequest, opts ...grpc.CallOption) (*StartSocksServerResponse, error) {
	out := new(StartSocksServerResponse)
	err := c.cc.Invoke(ctx, "/AgentManager/StartSocksServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) StopSocksServer(ctx context.Context, in *StopSocksServerRequest, opts ...grpc.CallOption) (*StopSocksServerResponse, error) {
	out := new(StopSocksServerResponse)
	err := c.cc.Invoke(ctx, "/AgentManager/StopSocksServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentManagerServer is the server API for AgentManager service.
// All implementations must embed UnimplementedAgentManagerServer
// for forward compatibility
type AgentManagerServer interface {
	RunEchoCommand(context.Context, *EchoCommandRequest) (*EchoCommandResponse, error)
	RunShellCommand(context.Context, *ShellCommandRequest) (*ShellCommandResponse, error)
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	Screenshot(context.Context, *ScreenshotRequest) (*ScreenshotResponse, error)
	GetAgents(*GetAgentsRequest, AgentManager_GetAgentsServer) error
	StartSocksServer(context.Context, *StartSocksServerRequest) (*StartSocksServerResponse, error)
	StopSocksServer(context.Context, *StopSocksServerRequest) (*StopSocksServerResponse, error)
	mustEmbedUnimplementedAgentManagerServer()
}

// UnimplementedAgentManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAgentManagerServer struct {
}

func (UnimplementedAgentManagerServer) RunEchoCommand(context.Context, *EchoCommandRequest) (*EchoCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunEchoCommand not implemented")
}
func (UnimplementedAgentManagerServer) RunShellCommand(context.Context, *ShellCommandRequest) (*ShellCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunShellCommand not implemented")
}
func (UnimplementedAgentManagerServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedAgentManagerServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedAgentManagerServer) Screenshot(context.Context, *ScreenshotRequest) (*ScreenshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Screenshot not implemented")
}
func (UnimplementedAgentManagerServer) GetAgents(*GetAgentsRequest, AgentManager_GetAgentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAgents not implemented")
}
func (UnimplementedAgentManagerServer) StartSocksServer(context.Context, *StartSocksServerRequest) (*StartSocksServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSocksServer not implemented")
}
func (UnimplementedAgentManagerServer) StopSocksServer(context.Context, *StopSocksServerRequest) (*StopSocksServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSocksServer not implemented")
}
func (UnimplementedAgentManagerServer) mustEmbedUnimplementedAgentManagerServer() {}

// UnsafeAgentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentManagerServer will
// result in compilation errors.
type UnsafeAgentManagerServer interface {
	mustEmbedUnimplementedAgentManagerServer()
}

func RegisterAgentManagerServer(s grpc.ServiceRegistrar, srv AgentManagerServer) {
	s.RegisterService(&AgentManager_ServiceDesc, srv)
}

func _AgentManager_RunEchoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).RunEchoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentManager/RunEchoCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).RunEchoCommand(ctx, req.(*EchoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_RunShellCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShellCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).RunShellCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentManager/RunShellCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).RunShellCommand(ctx, req.(*ShellCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentManager/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentManager/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_Screenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScreenshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).Screenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentManager/Screenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).Screenshot(ctx, req.(*ScreenshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_GetAgents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAgentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentManagerServer).GetAgents(m, &agentManagerGetAgentsServer{stream})
}

type AgentManager_GetAgentsServer interface {
	Send(*AgentInfo) error
	grpc.ServerStream
}

type agentManagerGetAgentsServer struct {
	grpc.ServerStream
}

func (x *agentManagerGetAgentsServer) Send(m *AgentInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentManager_StartSocksServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSocksServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).StartSocksServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentManager/StartSocksServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).StartSocksServer(ctx, req.(*StartSocksServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_StopSocksServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSocksServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).StopSocksServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentManager/StopSocksServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).StopSocksServer(ctx, req.(*StopSocksServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentManager_ServiceDesc is the grpc.ServiceDesc for AgentManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AgentManager",
	HandlerType: (*AgentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunEchoCommand",
			Handler:    _AgentManager_RunEchoCommand_Handler,
		},
		{
			MethodName: "RunShellCommand",
			Handler:    _AgentManager_RunShellCommand_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _AgentManager_DownloadFile_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _AgentManager_UploadFile_Handler,
		},
		{
			MethodName: "Screenshot",
			Handler:    _AgentManager_Screenshot_Handler,
		},
		{
			MethodName: "StartSocksServer",
			Handler:    _AgentManager_StartSocksServer_Handler,
		},
		{
			MethodName: "StopSocksServer",
			Handler:    _AgentManager_StopSocksServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAgents",
			Handler:       _AgentManager_GetAgents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cmds.proto",
}
